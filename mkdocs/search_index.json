{
    "docs": [
        {
            "location": "/", 
            "text": "YAML Form\n\n\nAbout this Module\n\n\nThe YAML Form module is a form builder and submission manager for Drupal 8.\n\n\nThe primary use case for this module is to:\n\n\n\n\nBuild\n a new form or duplicate an existing template\n\n\nPublish\n the form as a page, node, or block\n\n\nCollect\n submissions\n\n\nSend\n confirmations and notifications\n\n\nReview\n submissions online\n\n\nDownload\n submissions as a CSV\n\n\n\n\nDemo\n\n\n\n  \n\n\n\n\n\n\n\n\n\nEvaluate this project online using \nsimplytest.me\n.\n\n\nWatch a demo\n of the YAML Form module.\n\n\n\n\nGoals\n\n\n\n\nA comprehensive form and survey building solution for Drupal 8. \n\n\nA stable, maintainable, and tested API for building forms and handling submission.\n\n\nA pluggable/extensible API for custom form elements and submission handling. \n\n\n\n\nDocumentation\n\n\nThe YAML Form module\ns documentation is still under development. The YAML Form \nmodule has a dedicated website that provides \na \nfeatures summary\n, \n\ninstallation instructions\n,\n\nFAQs\n,\nand \nmore\n.\n\n\nReleases\n\n\nEven though the YAML Form module is still under active development with\nregular \nbeta releases\n,\nall existing configuration and submission data will be maintained and updated \nbetween releases.  \nAPIs can and will be changing\n while this module moves \nfrom beta releases to a final release candidate. \n\n\nSimply put, if you install and use the YAML Form module out of the box AS-IS, you \nshould\n be okay.  Once you start extending forms with plugins, \naltering  hooks, and overriding templates, you will need to read each release\ns \nnotes and assume that \nthings will be changing\n.\n\n\nSimilar Projects\n\n\n\n\nComparison of Form Building Modules\n\n\nContact\n \n\n\nContact Storage\n\n\nContact module 8.1 and beyond roadmap\n\n\nGoodbye Webform? Contact Forms Are In the Drupal 8 Core\n\n\n\n\n\n\nEform\n\n\nWhen to use Entityform\n\n\n\n\n\n\nWebform\n \n\n\nPort Webform to Drupal 8", 
            "title": "Home"
        }, 
        {
            "location": "/#yaml-form", 
            "text": "", 
            "title": "YAML Form"
        }, 
        {
            "location": "/#about-this-module", 
            "text": "The YAML Form module is a form builder and submission manager for Drupal 8.  The primary use case for this module is to:   Build  a new form or duplicate an existing template  Publish  the form as a page, node, or block  Collect  submissions  Send  confirmations and notifications  Review  submissions online  Download  submissions as a CSV", 
            "title": "About this Module"
        }, 
        {
            "location": "/#demo", 
            "text": "Evaluate this project online using  simplytest.me .  Watch a demo  of the YAML Form module.", 
            "title": "Demo"
        }, 
        {
            "location": "/#goals", 
            "text": "A comprehensive form and survey building solution for Drupal 8.   A stable, maintainable, and tested API for building forms and handling submission.  A pluggable/extensible API for custom form elements and submission handling.", 
            "title": "Goals"
        }, 
        {
            "location": "/#documentation", 
            "text": "The YAML Form module s documentation is still under development. The YAML Form \nmodule has a dedicated website that provides \na  features summary ,  installation instructions , FAQs ,\nand  more .", 
            "title": "Documentation"
        }, 
        {
            "location": "/#releases", 
            "text": "Even though the YAML Form module is still under active development with\nregular  beta releases ,\nall existing configuration and submission data will be maintained and updated \nbetween releases.   APIs can and will be changing  while this module moves \nfrom beta releases to a final release candidate.   Simply put, if you install and use the YAML Form module out of the box AS-IS, you  should  be okay.  Once you start extending forms with plugins, \naltering  hooks, and overriding templates, you will need to read each release s \nnotes and assume that  things will be changing .", 
            "title": "Releases"
        }, 
        {
            "location": "/#similar-projects", 
            "text": "Comparison of Form Building Modules  Contact    Contact Storage  Contact module 8.1 and beyond roadmap  Goodbye Webform? Contact Forms Are In the Drupal 8 Core    Eform  When to use Entityform    Webform    Port Webform to Drupal 8", 
            "title": "Similar Projects"
        }, 
        {
            "location": "/features/", 
            "text": "Features\n\n\nForm Builder\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe YAML Form module provides an intuitive form builder based upon Drupal 8\ns \nbest practices for user interface and user experience. The form builder allows non-technical users to easily build and maintain forms.\n\n\nForm builder features include:\n\n\n\n\nDrag-n-drop form element management\n\n\nGeneration of test submissions\n\n\nDuplication of existing forms, templates, and elements\n\n\n\n\nForm Settings\n\n\n\n\n\n\n\n\n\n\n\n\n\nForm submission handling, messaging, and confirmations are completely \ncustomizable using global settings and/or form-specific settings.\n\n\nForm settings that can be customized include:\n\n\n\n\nMessages and button labels\n\n\nConfirmation page, messages, and redirects\n\n\nConfidential submissions\n\n\nPrepopulating a form\ns elements using query string parameters\n\n\nLimiting number of submission per user, per form, and/or per node\n\n\n\n\nForm Elements\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe YAML Form module is built directly on top of Drupal 8\ns Form API. Every\n\nform element\n \navailable in Drupal 8 is supported by the YAML Form module.\n\n\nForm elements include:\n\n\n\n\nHTML:\n Textfield, Textareas, Checkboxes, Radios, Select menu, \n  Password, and more\n\n\nHTML5:\n Email, Url, Number, Telephone), Date, Number, Range, \n  and more\n\n\nDrupal specific\n File uploads, Entity References, Table select, Date list, \n  and more\n\n\nCustom:\n \nLikert scale\n, \n  Star rating, Toggle, Credit card number, Select/Checkboxes/Radios with other, \n  and more\n\n\nComposite elements:\n Address, Contact, and Credit Card \n\n\n\n\nCustom Properties\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll of Drupal 8\ns default form element properties and behaviors are supported. \nThere are also several custom form element properties and settings\navailable to enhance a form element\ns behavior.\n\n\nStandard and custom properties allow for:\n\n\n\n\nConditional logic\n using \nFAPI States API\n\n\nInput masks\n (using \njquery.inputmask\n)\n\n\nSelect2\n replacement of select boxes \n\n\nPrivate\n elements, visible only to administrators\n\n\nUnique\n values per element\n\n\n\n\nViewing Source\n\n\n\n\n\n\n\n\n\n\n\n\n\nAt the heart of a YAML Form module\ns form elements is a Drupal render array,\nwhich can be edited and managed by developers. The Drupal render array gives developers\ncomplete control over a form\ns elements, layout, and look-and-feel by\nallowing developers to make bulk updates to a form\ns label, descriptions, and \nbehaviors.\n\n\nStates/Conditional Logic\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrupal\ns State API can be used by developers to provide conditional logic to \nhide and show form elements.\n\n\nDrupal\ns State API supports:\n\n\n\n\nShow/Hide\n\n\nOpen/Close\n\n\nEnable/Disable\n\n\n\n\nMultistep Forms\n\n\n\n\n\n\n\n\n\n\n\n\n\nForms can be broken up into multiple pages using a progress bar. Authenticated\nusers can save drafts and/or have their changes automatically saved as they \nprogress through a long form.\n\n\nMultistep form features include:\n\n\n\n\nCustomizable progress bar\n\n\nCustomizable previous and next button labels\n\n\nSaving drafts between steps\n\n\n\n\nEmail/Handlers\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpon form submission, customizable email notifications and confirmations can\nbe sent to users and administrators. \n\n\nAn extendable plugin that allows developers to push submitted data \nto external or internal systems and/or applications is provided. \n\n\nEmail support features include:\n\n\n\n\nPreviewing and resending emails\n\n\nSending HTML emails\n\n\nFile attachments (requires the \nMail System\n and \nSwift Mailer\n module.) \n\n\nHTML and plain-text email-friendly Twig templates\n\n\nCustomizable display formats for individual form elements\n\n\n\n\nResults Management\n\n\n\n\n\n\n\n\n\n\n\n\n\nForm submissions can optionally be stored in the database, reviewed, and\ndownloaded.  \n\n\nSubmissions can also be flagged with administrative notes.\n\n\nResults management features include:\n\n\n\n\nFlagging\n\n\nAdministrative notes \n\n\nViewing submissions as HTML, plain text, and YAML\n\n\nCustomizable reports\n\n\nDownloading results as a CSV to Google Sheets or MS Excel\n\n\nSaving of download preferences per form\n\n\n\n\nAccess Controls\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe YAML Form module provide full access controls for managing who can create\nforms, post submissions, and access a form\ns results.\n\nAccess controls can be applied to roles and/or specific users.\n\n\nAccess controls allow users to:\n\n\n\n\nCreate new forms\n\n\nUpdate forms\n\n\nDelete forms\n\n\nView submissions\n\n\nUpdate submissions\n\n\nDelete submissions\n\n\n\n\nReusable Templates\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe YAML Form module provides a few starter templates and examples that form \nadministrators can update or use to create new reusable templates for their \norganization.\n\n\nStarter templates include:\n\n\n\n\nContact form\n\n\nRegistration form\n\n\nJob Application form \n\n\nSubscribe form\n\n\n\n\nReusable Options\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdministrators can define reusable global options for select menus, checkboxes, \nand radio buttons. The YAML Form module includes default options for states,\ncountries, \nlikert\n answers, \nand more.   \n\n\nReusable options include:\n\n\n\n\nCountry codes \n names \n\n\nState/province codes \n names  \n\n\nState codes   \n names     \n\n\nLikert agreement, comparison, importance, satisfaction, ten scale, and\n  would you\n\n\n\n\nInternationalization\n\n\n\n\n\n\n\n\n\n\n\n\n\nForms and configuration can be translated into multiple languages using Drupal\ns\nconfiguration translation system.    \n\n\nDrupal Integration\n\n\n\n\n\n\n\n\n\n\n\n\n\nForms can be attached to nodes or displayed as blocks.  Forms can also have \ndedicated SEO-friendly URLs. Form elements are simply render arrays that can\neasily be altered using custom hooks and/or plugins.\n\n\nDrush Integration\n\n\nDrush commands are provided to:\n\n\n\n\nGenerate multiple form submissions.\n\n\nExport form submissions.\n\n\nPurge form submissions.\n\n\nDownload and manage third party libraries.\n\n\nTidy YAML configuration files. \n\n\n\n\n\n\n\n\n  \n\n    \n\n      \n\n        \nClose\n\n        \n\n      \n\n      \n\n        \n\n      \n\n      \n\n        \nClose", 
            "title": "Features"
        }, 
        {
            "location": "/features/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/features/#form-builder", 
            "text": "The YAML Form module provides an intuitive form builder based upon Drupal 8 s \nbest practices for user interface and user experience. The form builder allows non-technical users to easily build and maintain forms.  Form builder features include:   Drag-n-drop form element management  Generation of test submissions  Duplication of existing forms, templates, and elements", 
            "title": "Form Builder"
        }, 
        {
            "location": "/features/#form-settings", 
            "text": "Form submission handling, messaging, and confirmations are completely \ncustomizable using global settings and/or form-specific settings.  Form settings that can be customized include:   Messages and button labels  Confirmation page, messages, and redirects  Confidential submissions  Prepopulating a form s elements using query string parameters  Limiting number of submission per user, per form, and/or per node", 
            "title": "Form Settings"
        }, 
        {
            "location": "/features/#form-elements", 
            "text": "The YAML Form module is built directly on top of Drupal 8 s Form API. Every form element  \navailable in Drupal 8 is supported by the YAML Form module.  Form elements include:   HTML:  Textfield, Textareas, Checkboxes, Radios, Select menu, \n  Password, and more  HTML5:  Email, Url, Number, Telephone), Date, Number, Range, \n  and more  Drupal specific  File uploads, Entity References, Table select, Date list, \n  and more  Custom:   Likert scale , \n  Star rating, Toggle, Credit card number, Select/Checkboxes/Radios with other, \n  and more  Composite elements:  Address, Contact, and Credit Card", 
            "title": "Form Elements"
        }, 
        {
            "location": "/features/#custom-properties", 
            "text": "All of Drupal 8 s default form element properties and behaviors are supported. \nThere are also several custom form element properties and settings\navailable to enhance a form element s behavior.  Standard and custom properties allow for:   Conditional logic  using  FAPI States API  Input masks  (using  jquery.inputmask )  Select2  replacement of select boxes   Private  elements, visible only to administrators  Unique  values per element", 
            "title": "Custom Properties"
        }, 
        {
            "location": "/features/#viewing-source", 
            "text": "At the heart of a YAML Form module s form elements is a Drupal render array,\nwhich can be edited and managed by developers. The Drupal render array gives developers\ncomplete control over a form s elements, layout, and look-and-feel by\nallowing developers to make bulk updates to a form s label, descriptions, and \nbehaviors.", 
            "title": "Viewing Source"
        }, 
        {
            "location": "/features/#statesconditional-logic", 
            "text": "Drupal s State API can be used by developers to provide conditional logic to \nhide and show form elements.  Drupal s State API supports:   Show/Hide  Open/Close  Enable/Disable", 
            "title": "States/Conditional Logic"
        }, 
        {
            "location": "/features/#multistep-forms", 
            "text": "Forms can be broken up into multiple pages using a progress bar. Authenticated\nusers can save drafts and/or have their changes automatically saved as they \nprogress through a long form.  Multistep form features include:   Customizable progress bar  Customizable previous and next button labels  Saving drafts between steps", 
            "title": "Multistep Forms"
        }, 
        {
            "location": "/features/#emailhandlers", 
            "text": "Upon form submission, customizable email notifications and confirmations can\nbe sent to users and administrators.   An extendable plugin that allows developers to push submitted data \nto external or internal systems and/or applications is provided.   Email support features include:   Previewing and resending emails  Sending HTML emails  File attachments (requires the  Mail System  and  Swift Mailer  module.)   HTML and plain-text email-friendly Twig templates  Customizable display formats for individual form elements", 
            "title": "Email/Handlers"
        }, 
        {
            "location": "/features/#results-management", 
            "text": "Form submissions can optionally be stored in the database, reviewed, and\ndownloaded.    Submissions can also be flagged with administrative notes.  Results management features include:   Flagging  Administrative notes   Viewing submissions as HTML, plain text, and YAML  Customizable reports  Downloading results as a CSV to Google Sheets or MS Excel  Saving of download preferences per form", 
            "title": "Results Management"
        }, 
        {
            "location": "/features/#access-controls", 
            "text": "The YAML Form module provide full access controls for managing who can create\nforms, post submissions, and access a form s results. \nAccess controls can be applied to roles and/or specific users.  Access controls allow users to:   Create new forms  Update forms  Delete forms  View submissions  Update submissions  Delete submissions", 
            "title": "Access Controls"
        }, 
        {
            "location": "/features/#reusable-templates", 
            "text": "The YAML Form module provides a few starter templates and examples that form \nadministrators can update or use to create new reusable templates for their \norganization.  Starter templates include:   Contact form  Registration form  Job Application form   Subscribe form", 
            "title": "Reusable Templates"
        }, 
        {
            "location": "/features/#reusable-options", 
            "text": "Administrators can define reusable global options for select menus, checkboxes, \nand radio buttons. The YAML Form module includes default options for states,\ncountries,  likert  answers, \nand more.     Reusable options include:   Country codes   names   State/province codes   names    State codes     names       Likert agreement, comparison, importance, satisfaction, ten scale, and\n  would you", 
            "title": "Reusable Options"
        }, 
        {
            "location": "/features/#internationalization", 
            "text": "Forms and configuration can be translated into multiple languages using Drupal s\nconfiguration translation system.", 
            "title": "Internationalization"
        }, 
        {
            "location": "/features/#drupal-integration", 
            "text": "Forms can be attached to nodes or displayed as blocks.  Forms can also have \ndedicated SEO-friendly URLs. Form elements are simply render arrays that can\neasily be altered using custom hooks and/or plugins.", 
            "title": "Drupal Integration"
        }, 
        {
            "location": "/features/#drush-integration", 
            "text": "Drush commands are provided to:   Generate multiple form submissions.  Export form submissions.  Purge form submissions.  Download and manage third party libraries.  Tidy YAML configuration files.     \n   \n     \n       \n         Close", 
            "title": "Drush Integration"
        }, 
        {
            "location": "/download/", 
            "text": "Redirects to Drupal.org", 
            "title": "Download"
        }, 
        {
            "location": "/download/#redirects-to-drupalorg", 
            "text": "", 
            "title": "Redirects to Drupal.org"
        }, 
        {
            "location": "/support/installation/", 
            "text": "Installation\n\n\nInstalling the YAML Form Module\n\n\n\n\n\n\nCopy/upload the yamlform.module to the modules directory of your Drupal\n   installation.\n\n\n\n\n\n\nEnable the \nYAML Form\n module and desired \nsub-modules\n in \nExtend\n. \n   (/admin/modules)\n\n\n\n\n\n\nSetup user permissions. (/admin/people/permissions#module-yamlform)\n\n\n\n\n\n\nBuild a new form (/admin/structure/yamlform)\n   or duplicate an existing template (/admin/structure/yamlform/templates).\n\n\n\n\n\n\nPublish your form as a:\n\n\n\n\n\n\nPage:\n By linking to the published form.\n  (/yamlform/contact)  \n\n\n\n\n\n\nNode:\n By creating a new node that references the form.\n  (/node/add/yamlform)\n\n\n\n\n\n\nBlock:\n By placing a YAML Form block on your site.\n  (/admin/structure/block)\n\n\n\n\n\n\n\n\n\n\n(optional) Install \nthird party libraries\n.\n\n\n\n\n\n\n(optional) Install \nadditional contrib modules\n.\n\n\n\n\n\n\nSub Modules\n\n\nYAML Form UI\n\n\nThe YAML Form UI module provides a simple user interface for building and \nmaintaining forms.\n\n\n\n\nUnless your website is maintained by experienced Drupal developers, \nevery website should enable the YAML Form UI module. \n\n\n\n\nYAML Form Templates\n\n\nThe YAML Form Templates module provides starter templates that can be used \nto create new forms. \n\n\n\n\nBesides using the provided default starter templates, you can also create \ncustom templates for your organization.\n\n\n\n\nYAML Form Node\n\n\nThe YAML Form Node module provides a \nForm\n content type, which allows\n\nforms to be integrated into a website as nodes.\n\n\n\n\nThe YAML Form Node module creates a form (entity reference) field\nthat allows any form to be attached to any content type.  \n\n\n\n\nYAML Form Examples\n\n\nThe YAML Form Examples module provides examples of all available form elements \nand functionality, which can used for demonstrating and testing advanced \nfunctionality or used as cut-n-paste code snippets for creating new forms.\n\n\n\n\nThe YAML Form Examples module allows site builders and developers to \npreview and experiment with working examples of all supported form elements \nand features.\n\n\n\n\nAdditional Contrib Modules\n\n\nWhen installed, the modules below will enhance your website\ns form building and \nsubmission handling functionality and experience.\n\n\nYAML Form Migrate\n\n\nThe \nYAML Form Migrate\n provides \na migration source plugin and a migration template to migrate Drupal 6\nwebforms to Drupal 8 YAML Forms.\n\n\nYAML Form Queue\n\n\nThe \nYAML Form Queue\n module \nprovides a  queue handler for YAML Form, to store form submissions in a queue.\n\n\nToken\n\n\nThe \nToken\n module provides additional \ntokens not supported by core (most notably fields), as well as a UI for browsing \ntokens.\n\n\n\n\nTokens are supported and actively used by the YAML Form module. Installing the\nToken module will provide form builders with the ability to browse form and \nsubmission specific tokens. \n\n\n\n\nMail System\n and \nSwift Mailer\n\n\nThe \nMail System\n module provides an \nAdministrative UI and Developers API for managing the mail backend/plugin.\n\n\nThe \nSwift Mailer\n extends the \nbasic e-mail sending functionality provided by Drupal by delegating all e-mail\nhandling to the Swift Mailer library.\n\n\n\n\nThe YAML Form module provide support for HTML email, however to send file \nattachments, please install and configure the \n\nMail System\n and \n\nSwift Mailer\n modules.\n\n\n\n\nHoneypot\n\n\nThe \nHoneypot\n module uses both the \nhoneypot and timestamp methods of deterring spam bots from completing forms on \nyour Drupal site.\n\n\n\n\nThe Honeypot module provides the best unobtrusive protection against SPAM form submissions.\n\n\n\n\nCAPTCHA\n and \nreCAPTCHA\n\n\nThe \nCAPTCHA\n module provides the \nCAPTCHA API for adding challenges to arbitrary forms.\n\n\nThe \nreCAPTCHA\n module uses the\n\nGoogle reCAPTCHA\n web \nservice to improve the CAPTCHA system, and to protect email addresses.\n\n\n\n\nCAPTCHA provides additional, slightly obtrusive protection against SPAM \nsubmissions.\n\n\n\n\nValidators\n\n\nThe \nValidators\n module allows you \nto use the Symfony Validator component within a form.\n\n\n\n\nThe Validators module is one of the YAML Form module\ns supported \nvalidation mechanisms.\n\n\n\n\nThird Party Libraries\n\n\nThe YAML Form module utilizes the third-party Open Source libraries below to \nenhance form elements and to provide additional functionality.  It is recommended \nthat these libraries be installed in your Drupal installations /libraries \ndirectory.  If these libraries are not installed, they are automatically loaded \nfrom a CDN.\n\n\n\n\nPLEASE NOTE: The \n\nLibraries API\n for Drupal 8 is \nstill under development.  \n\n\n\n\nCurrently the best way to download all the needed third party libraries is to \neither add \nyamlform.libraries.make.yml\n\nto your drush make file or execute below drush command from the root of your \nDrupal installation.  \n\n\ndrush yamlform-libraries-download\n\n\n\nCode Mirror\n - \nDemo\n\n\nA versatile text editor implemented in JavaScript for the browser.\n\n\n\n\nCode Mirror is used to provide a text editor for YAML and HTML configuration\nsettings and messages.\n\n\n\n\nGeocomplete\n - \nDemo\n\n\nAn advanced jQuery plugin that wraps the Google Maps API\ns Geocoding and Places Autocomplete services.\n\n\n\n\nGeocomplete is used by the location element.\n\n\n\n\nInput Mask\n - \nDemo\n\n\nInput masks ensures a predefined format is entered. This can be useful for \ndates, numerics, phone numbers, etc\n\n\n\n\nInput masks are used to ensure predefined and custom format for text fields.\n\n\n\n\nRateIt\n - \nDemo\n\n\nRating plugin for jQuery. Fast, Progressive enhancement, touch support, \ncustomizable (just swap out the images, or change some CSS), Unobtrusive \nJavaScript (using HTML5 data-* attributes), RTL support, supports as many stars \nas you\nd like, and also any step size.\n\n\n\n\nRateIt is used to provide a customizable rating form element.\n\n\n\n\nSelect2\n - \nDemo\n\n\nSelect2 gives you a customizable select box with support for searching and \ntagging.\n\n\n\n\nSelect2 is used to improve the user experience for select menus.\n\n\n\n\nSignature Pad\n - \nDemo\n\n\nSignature Pad is a JavaScript library for drawing smooth signatures. It\ns HTML5 \ncanvas based and uses variable width B\u00e9zier curve interpolation \nIt works in all modern desktop and mobile browsers and doesn\nt depend on any \nexternal libraries.\n\n\n\n\nSignature Pad is used to provide a signature element.\n\n\n\n\nTimepicker\n - \nDemo\n\n\nA lightweight, customizable javascript timepicker plugin for jQuery inspired by Google Calendar.\n\n\n\n\nTimepicker is used to provide a polyfill for HTML 5 time elements.\n\n\n\n\nToggles\n - \nDemo\n\n\nToggles is a lightweight jQuery plugin that creates easily-styleable toggle buttons.\n\n\n\n\nToggles is used to provide a toggle element.\n\n\n\n\nWord and Character Counter\n - \nDemo\n\n\nThe jQuery Word and character counter plug-in allows you to count characters\nor words.\n\n\n\n\nWord or character counting, with server-side validation, is available for text \nfields and text areas.\n\n\n\n\nCKEditor\n\n\nThe standard version of the CKEditor.\n\n\n\n\nAllows the YAML Form module to implement a basic and simpler CKEditor.", 
            "title": "Installation"
        }, 
        {
            "location": "/support/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/support/installation/#installing-the-yaml-form-module", 
            "text": "Copy/upload the yamlform.module to the modules directory of your Drupal\n   installation.    Enable the  YAML Form  module and desired  sub-modules  in  Extend . \n   (/admin/modules)    Setup user permissions. (/admin/people/permissions#module-yamlform)    Build a new form (/admin/structure/yamlform)\n   or duplicate an existing template (/admin/structure/yamlform/templates).    Publish your form as a:    Page:  By linking to the published form.\n  (/yamlform/contact)      Node:  By creating a new node that references the form.\n  (/node/add/yamlform)    Block:  By placing a YAML Form block on your site.\n  (/admin/structure/block)      (optional) Install  third party libraries .    (optional) Install  additional contrib modules .", 
            "title": "Installing the YAML Form Module"
        }, 
        {
            "location": "/support/installation/#sub-modules", 
            "text": "YAML Form UI  The YAML Form UI module provides a simple user interface for building and \nmaintaining forms.   Unless your website is maintained by experienced Drupal developers, \nevery website should enable the YAML Form UI module.    YAML Form Templates  The YAML Form Templates module provides starter templates that can be used \nto create new forms.    Besides using the provided default starter templates, you can also create \ncustom templates for your organization.   YAML Form Node  The YAML Form Node module provides a  Form  content type, which allows \nforms to be integrated into a website as nodes.   The YAML Form Node module creates a form (entity reference) field\nthat allows any form to be attached to any content type.     YAML Form Examples  The YAML Form Examples module provides examples of all available form elements \nand functionality, which can used for demonstrating and testing advanced \nfunctionality or used as cut-n-paste code snippets for creating new forms.   The YAML Form Examples module allows site builders and developers to \npreview and experiment with working examples of all supported form elements \nand features.", 
            "title": "Sub Modules"
        }, 
        {
            "location": "/support/installation/#additional-contrib-modules", 
            "text": "When installed, the modules below will enhance your website s form building and \nsubmission handling functionality and experience.  YAML Form Migrate  The  YAML Form Migrate  provides \na migration source plugin and a migration template to migrate Drupal 6\nwebforms to Drupal 8 YAML Forms.  YAML Form Queue  The  YAML Form Queue  module \nprovides a  queue handler for YAML Form, to store form submissions in a queue.  Token  The  Token  module provides additional \ntokens not supported by core (most notably fields), as well as a UI for browsing \ntokens.   Tokens are supported and actively used by the YAML Form module. Installing the\nToken module will provide form builders with the ability to browse form and \nsubmission specific tokens.    Mail System  and  Swift Mailer  The  Mail System  module provides an \nAdministrative UI and Developers API for managing the mail backend/plugin.  The  Swift Mailer  extends the \nbasic e-mail sending functionality provided by Drupal by delegating all e-mail\nhandling to the Swift Mailer library.   The YAML Form module provide support for HTML email, however to send file \nattachments, please install and configure the  Mail System  and  Swift Mailer  modules.   Honeypot  The  Honeypot  module uses both the \nhoneypot and timestamp methods of deterring spam bots from completing forms on \nyour Drupal site.   The Honeypot module provides the best unobtrusive protection against SPAM form submissions.   CAPTCHA  and  reCAPTCHA  The  CAPTCHA  module provides the \nCAPTCHA API for adding challenges to arbitrary forms.  The  reCAPTCHA  module uses the Google reCAPTCHA  web \nservice to improve the CAPTCHA system, and to protect email addresses.   CAPTCHA provides additional, slightly obtrusive protection against SPAM \nsubmissions.   Validators  The  Validators  module allows you \nto use the Symfony Validator component within a form.   The Validators module is one of the YAML Form module s supported \nvalidation mechanisms.", 
            "title": "Additional Contrib Modules"
        }, 
        {
            "location": "/support/installation/#third-party-libraries", 
            "text": "The YAML Form module utilizes the third-party Open Source libraries below to \nenhance form elements and to provide additional functionality.  It is recommended \nthat these libraries be installed in your Drupal installations /libraries \ndirectory.  If these libraries are not installed, they are automatically loaded \nfrom a CDN.   PLEASE NOTE: The  Libraries API  for Drupal 8 is \nstill under development.     Currently the best way to download all the needed third party libraries is to \neither add  yamlform.libraries.make.yml \nto your drush make file or execute below drush command from the root of your \nDrupal installation.    drush yamlform-libraries-download  Code Mirror  -  Demo  A versatile text editor implemented in JavaScript for the browser.   Code Mirror is used to provide a text editor for YAML and HTML configuration\nsettings and messages.   Geocomplete  -  Demo  An advanced jQuery plugin that wraps the Google Maps API s Geocoding and Places Autocomplete services.   Geocomplete is used by the location element.   Input Mask  -  Demo  Input masks ensures a predefined format is entered. This can be useful for \ndates, numerics, phone numbers, etc   Input masks are used to ensure predefined and custom format for text fields.   RateIt  -  Demo  Rating plugin for jQuery. Fast, Progressive enhancement, touch support, \ncustomizable (just swap out the images, or change some CSS), Unobtrusive \nJavaScript (using HTML5 data-* attributes), RTL support, supports as many stars \nas you d like, and also any step size.   RateIt is used to provide a customizable rating form element.   Select2  -  Demo  Select2 gives you a customizable select box with support for searching and \ntagging.   Select2 is used to improve the user experience for select menus.   Signature Pad  -  Demo  Signature Pad is a JavaScript library for drawing smooth signatures. It s HTML5 \ncanvas based and uses variable width B\u00e9zier curve interpolation \nIt works in all modern desktop and mobile browsers and doesn t depend on any \nexternal libraries.   Signature Pad is used to provide a signature element.   Timepicker  -  Demo  A lightweight, customizable javascript timepicker plugin for jQuery inspired by Google Calendar.   Timepicker is used to provide a polyfill for HTML 5 time elements.   Toggles  -  Demo  Toggles is a lightweight jQuery plugin that creates easily-styleable toggle buttons.   Toggles is used to provide a toggle element.   Word and Character Counter  -  Demo  The jQuery Word and character counter plug-in allows you to count characters\nor words.   Word or character counting, with server-side validation, is available for text \nfields and text areas.   CKEditor  The standard version of the CKEditor.   Allows the YAML Form module to implement a basic and simpler CKEditor.", 
            "title": "Third Party Libraries"
        }, 
        {
            "location": "/support/faq/", 
            "text": "Frequently Asked Questions (FAQ)\n\n\nCommon Questions\n\n\nWho are you?\n\n\nHi, I am Jacob Rockowitz (aka \njrockowitz\n on D.O)\nand I have building custom enterprise CMS solutions for the past 15 years.\nI have been active in Drupal community since 2009. Please visit \n\nmy website\n\nto learn more about me.\n\n\nWhy did you build this module?\n\n\nI was the lead developer responsible for migrating, architecting, and building \nMemorial Sloan Kettering\ns current Drupal 8 website.  Memorial Sloan Kettering\nwas one of the largest early adopters of Drupal 8, launching a 30,0000+ page\nwebsite using a Beta release of Drupal 8.\n\n\nLearn more about \nMemorial Sloan Kettering\ns early adoption of Drupal 8\n.\n\n\nWhere did you get this idea?\n\n\nThe Webform module was not available for Drupal 8, and MSKCC needed a form builder\nand submission manager. We had to come up with a quick and simple D8 replacement\nfor the Webform module. \n\n\nHow did you build this module?\n\n\nThe original concept for the YAML Form module was to provide the simplest UI that required the least amount of work for building forms. Building a user interface\nis a lot of work, while editing YAML files required very little work to set up.\nSerializing renders array into editable YAML with some Form API documentation \nallowed MSK\ns site builders to build and manage hundreds of forms.\n\n\nFor the past 6+ months, I have been building out and improving this \nmodule iteratively, trying to reach feature parity with the Webform module and other online \nform builders, such as Wufoo and Gravity Forms.\n\n\nWhat are you planning on doing with this module?\n\n\nFor now my goal is simply to publish a release candidate. In the long term,\nI would like the YAML Form module to continue to leverage improvements in Drupal\ncore and hopefully become an important must-have contrib module for Drupal 8. \n\n\nMy dream is to convince the Drupal Association to stop using Survey Monkey.\n\n\nFinally, I need the Drupal community\ns help in figuring out how to I can\ncontinue to support this module while still paying my bills.\n\n\nSpecific Questions\n\n\nIs the YAML Form module a replacement for the Drupal\ns 7 Webform module?\n\n\nOriginally, the YAML Form module was meant to be a temporary form building \nsolution while the Webform module was ported to Drupal 8. It now seems unlikely \nthat the Webform module will be ported to Drupal 8. Over the past year, the \nYAML Form module has nearly reached feature parity with the Webform module. So \nthe answer is \nYES\n, the YAML Form module can be considered a Drupal 8 \nreplacement for the Webform module.\n\n\nLearn more about the effort to \nport Webform to Drupal 8\n.\n\n\nIf you are interested in migrating from the Webform module for D6/D7 to \nthe YAML Form module, please checkout the \n\nYAML Form Migrate\n module.\n\n\nWhat Webform \n EntityForm features are currently missing from the YAML Form module?\n\n\nForm settings \n\n\n\n\nLimit submission by IP and/or cookie\n\n\nResetting sid per form\n\n\n\n\nResults\n\n\n\n\nAnalysis of submitted data\n\n\nSubmission sorting\n\n\n\n\nDownload\n\n\n\n\nTracking last downloaded sid\n\n\n\n\n\n\nAnalytics and reporting will never be included in the main YAML Form module. \n\n\nAnalytics and reporting should be handled by a dedicated module, or by a third party service.\n\n\n\n\nLearn more about the \ncurrently missing features\n.\n\n\nWhat are the alternatives to form?\n\n\nIn Drupal 7, and now in Drupal 8, there are two primary approaches to form builder \nmodules: Webform and Entity Form. Webform (and now YAML Form) uses Drupal\ns \nForm API (FAPI) to build forms with an Entity\u2013attribute\u2013value (EAV) table to \nstore submissions. Entity Forms (now EForm and Contact Storage in D8) uses \nDrupal\ns Field API to build forms that store submissions in field-specific \ntables. There are benefits and downsides to both approaches. Since \nFAPI and EAV are simpler than the Field API, the YAML Form module is able to \nprovide a leaner and faster UI for building forms and managing submissions. \nMeanwhile, using Drupal\ns Field API allows submissions to be customized, \nformatted, and managed using multiple displays and form modes with full Views \nintegration, with extra functionality provided by Field API related \ncontrib modules.\n\n\nIf you need robust reporting and submission management, you should use an \nentity based form builder, such as Contact Storage. If you just want to build a \nform and collect data, the YAML Form module is going to be the simpler solution. \n\n\nLearn more about the \nContact Storage\n module.\n\n\nContributing Questions\n\n\nHow can I help?\n\n\nI have a lot of experience building and maintaining full applications, so I \nam reasonably comfortable managing the gestalt of the YAML Form module. My \nbiggest challenge and limitation is writing documentation. Simply put, I am \njust more productive at writing code.\n\n\nI do need help with documentation, Views integration, templating, and the \nfront-end user interface.\n\n\nI also need site builders to test the module, and developers to review the APIs. \n\n\nFinally, I need your help to spread the word about how much you like the \nYAML Form module by tweeting and writing blog posts.\n\n\nCan I donate to your cause?\n\n\nRight now, I am okay and have steady work with MSKCC. In the long term, I am \nmost likely going to have to ask for donations and sponsorship. My goal for now is to get a stable release out to the Drupal community.\n\n\nStill, it would seem silly for me \nnot\n to provide a donate button. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCan I hire you to help my organization implement and/or migrate from D6/D7 to \nthe YAML Form module?\n\n\nAbsolutely, I look forward to helping anyone migrate and adopt the YAML Form \nmodule.\n\n\nPlease \ncontact me\n.\n\n\nTroubleshooting\n\n\nHow to debug issues with form elements/elements\n\n\n\n\n\n\nA form\ns element is just a \nForm API(FAPI)\n\n  \nrender array\n. \n\n\n\n\n\n\nSome issues can be fixed by reading the API documentation associated \n  with a given \nform element\n.\n  Links to a form element\ns API documentation are included in the Elements \n  overview. (/admin/structure/yamlform/settings/elements)\n\n\n\n\n\n\nHow to get help fixing issues with the YAML Form module\n\n\n\n\n\n\nReview the YAML Form module\ns \nissue queue\n \n  for similar issues.\n\n\n\n\n\n\nIf you need to create a new issue, \nplease\n create and export an example of \n  the broken form configuration. \n\n\nThis will help guarantee that your issue is reproducible.\n  \n\n\n\n\n\n\nPlease also read \nHow to create a good issue\n\n  and use the \nIssue Summary Template\n\n  when creating new issues.", 
            "title": "Frequently Asked Questions (FAQ)"
        }, 
        {
            "location": "/support/faq/#frequently-asked-questions-faq", 
            "text": "", 
            "title": "Frequently Asked Questions (FAQ)"
        }, 
        {
            "location": "/support/faq/#common-questions", 
            "text": "Who are you?  Hi, I am Jacob Rockowitz (aka  jrockowitz  on D.O)\nand I have building custom enterprise CMS solutions for the past 15 years.\nI have been active in Drupal community since 2009. Please visit  my website \nto learn more about me.  Why did you build this module?  I was the lead developer responsible for migrating, architecting, and building \nMemorial Sloan Kettering s current Drupal 8 website.  Memorial Sloan Kettering\nwas one of the largest early adopters of Drupal 8, launching a 30,0000+ page\nwebsite using a Beta release of Drupal 8.  Learn more about  Memorial Sloan Kettering s early adoption of Drupal 8 .  Where did you get this idea?  The Webform module was not available for Drupal 8, and MSKCC needed a form builder\nand submission manager. We had to come up with a quick and simple D8 replacement\nfor the Webform module.   How did you build this module?  The original concept for the YAML Form module was to provide the simplest UI that required the least amount of work for building forms. Building a user interface\nis a lot of work, while editing YAML files required very little work to set up.\nSerializing renders array into editable YAML with some Form API documentation \nallowed MSK s site builders to build and manage hundreds of forms.  For the past 6+ months, I have been building out and improving this \nmodule iteratively, trying to reach feature parity with the Webform module and other online \nform builders, such as Wufoo and Gravity Forms.  What are you planning on doing with this module?  For now my goal is simply to publish a release candidate. In the long term,\nI would like the YAML Form module to continue to leverage improvements in Drupal\ncore and hopefully become an important must-have contrib module for Drupal 8.   My dream is to convince the Drupal Association to stop using Survey Monkey.  Finally, I need the Drupal community s help in figuring out how to I can\ncontinue to support this module while still paying my bills.", 
            "title": "Common Questions"
        }, 
        {
            "location": "/support/faq/#specific-questions", 
            "text": "Is the YAML Form module a replacement for the Drupal s 7 Webform module?  Originally, the YAML Form module was meant to be a temporary form building \nsolution while the Webform module was ported to Drupal 8. It now seems unlikely \nthat the Webform module will be ported to Drupal 8. Over the past year, the \nYAML Form module has nearly reached feature parity with the Webform module. So \nthe answer is  YES , the YAML Form module can be considered a Drupal 8 \nreplacement for the Webform module.  Learn more about the effort to  port Webform to Drupal 8 .  If you are interested in migrating from the Webform module for D6/D7 to \nthe YAML Form module, please checkout the  YAML Form Migrate  module.  What Webform   EntityForm features are currently missing from the YAML Form module?  Form settings    Limit submission by IP and/or cookie  Resetting sid per form   Results   Analysis of submitted data  Submission sorting   Download   Tracking last downloaded sid    Analytics and reporting will never be included in the main YAML Form module.   Analytics and reporting should be handled by a dedicated module, or by a third party service.   Learn more about the  currently missing features .  What are the alternatives to form?  In Drupal 7, and now in Drupal 8, there are two primary approaches to form builder \nmodules: Webform and Entity Form. Webform (and now YAML Form) uses Drupal s \nForm API (FAPI) to build forms with an Entity\u2013attribute\u2013value (EAV) table to \nstore submissions. Entity Forms (now EForm and Contact Storage in D8) uses \nDrupal s Field API to build forms that store submissions in field-specific \ntables. There are benefits and downsides to both approaches. Since \nFAPI and EAV are simpler than the Field API, the YAML Form module is able to \nprovide a leaner and faster UI for building forms and managing submissions. \nMeanwhile, using Drupal s Field API allows submissions to be customized, \nformatted, and managed using multiple displays and form modes with full Views \nintegration, with extra functionality provided by Field API related \ncontrib modules.  If you need robust reporting and submission management, you should use an \nentity based form builder, such as Contact Storage. If you just want to build a \nform and collect data, the YAML Form module is going to be the simpler solution.   Learn more about the  Contact Storage  module.", 
            "title": "Specific Questions"
        }, 
        {
            "location": "/support/faq/#contributing-questions", 
            "text": "How can I help?  I have a lot of experience building and maintaining full applications, so I \nam reasonably comfortable managing the gestalt of the YAML Form module. My \nbiggest challenge and limitation is writing documentation. Simply put, I am \njust more productive at writing code.  I do need help with documentation, Views integration, templating, and the \nfront-end user interface.  I also need site builders to test the module, and developers to review the APIs.   Finally, I need your help to spread the word about how much you like the \nYAML Form module by tweeting and writing blog posts.  Can I donate to your cause?  Right now, I am okay and have steady work with MSKCC. In the long term, I am \nmost likely going to have to ask for donations and sponsorship. My goal for now is to get a stable release out to the Drupal community.  Still, it would seem silly for me  not  to provide a donate button.         Can I hire you to help my organization implement and/or migrate from D6/D7 to \nthe YAML Form module?  Absolutely, I look forward to helping anyone migrate and adopt the YAML Form \nmodule.  Please  contact me .", 
            "title": "Contributing Questions"
        }, 
        {
            "location": "/support/faq/#troubleshooting", 
            "text": "How to debug issues with form elements/elements    A form s element is just a  Form API(FAPI) \n   render array .     Some issues can be fixed by reading the API documentation associated \n  with a given  form element .\n  Links to a form element s API documentation are included in the Elements \n  overview. (/admin/structure/yamlform/settings/elements)    How to get help fixing issues with the YAML Form module    Review the YAML Form module s  issue queue  \n  for similar issues.    If you need to create a new issue,  please  create and export an example of \n  the broken form configuration.   This will help guarantee that your issue is reproducible.       Please also read  How to create a good issue \n  and use the  Issue Summary Template \n  when creating new issues.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/support/videos/", 
            "text": "Videos \n Presentations\n\n\nSite Builder Preview\n\n\n\n  \n\n\n\n\n\n\n\nDeveloper Preview\n\n\n\n  \n\n\n\n\n\n\n\nYAML, What is it good for?", 
            "title": "Videos & Presentations"
        }, 
        {
            "location": "/support/videos/#videos-presentations", 
            "text": "", 
            "title": "Videos &amp; Presentations"
        }, 
        {
            "location": "/support/videos/#site-builder-preview", 
            "text": "", 
            "title": "Site Builder Preview"
        }, 
        {
            "location": "/support/videos/#developer-preview", 
            "text": "", 
            "title": "Developer Preview"
        }, 
        {
            "location": "/support/videos/#yaml-what-is-it-good-for", 
            "text": "", 
            "title": "YAML, What is it good for?"
        }, 
        {
            "location": "/support/screencasts/", 
            "text": "Screencasts / Tutorials\n\n\nThe YAML Form module\n\n\nThe YAML Form module is a FAPI based form builder and submission manager for Drupal 8.\n\n\n\n  \n\n\n\n\n\n\n\nManaging forms\n\n\nThe Forms page lists all available forms, which can be filtered by title, description, and/or elements.\n\n\n\n  \n\n\n\n\n\n\n\nUsing templates\n\n\nThe Templates page lists reusable templates that can be duplicated and customized to create new forms.\n\n\n\n  \n\n\n\n\n\n\n\nManaging results\n\n\nThe Results page lists all incoming submissions for all forms.\n\n\n\n  \n\n\n\n\n\n\n\nDefining default settings\n\n\nThe Settings page allows administrators to manage global form and UI configuration settings, including updating default labels \n descriptions, settings default format, and defining test dataset.\n\n\n\n  \n\n\n\n\n\n\n\nDefining options\n\n\nThe Options page lists predefined options which are used to build select menus, radio buttons, checkboxes and likerts.\n\n\n\n  \n\n\n\n\n\n\n\nForm element plugins\n\n\nThe Elements page  lists all available form element plugins. Form element plugins are used to enhance existing render/form elements. Form element plugins provide default properties, data normalization, custom validation, element configuration form, and customizable display formats.\n\n\n\n  \n\n\n\n\n\n\n\nForm handler plugins\n\n\nThe Handler page  lists all available form handler plugins. Handlers are used to route submitted data to external applications and send notifications \n confirmations.\n\n\n\n  \n\n\n\n\n\n\n\nConfiguring global third party settings\n\n\nThe Third party settings page allows contrib and custom modules to define global settings that are applied to all forms and submissions.\n\n\n\n  \n\n\n\n\n\n\n\nBuilding a form\n\n\nThe Form elements page allows users to add, update, duplicate, and delete form elements and wizard pages.\n\n\n\n  \n\n\n\n\n\n\n\nEditing YAML source\n\n\nThe (View) Source page allows developers to edit a form\ns render array using YAML markup. Developers can use the (View) Source page to quickly alter a form\ns labels, cut-n-paste multiple elements, reorder elements, and add customize properties and markup to elements.\n\n\n\n  \n\n\n\n\n\n\n\nTesting a form\n\n\nThe Form test page allows a form to be tested using a customizable test dataset. Multiple test submissions can be created using the devel_generate module.\n\n\n\n  \n\n\n\n\n\n\n\nCustomizing form settings\n\n\nThe Form settings page allows a form\ns labels, messaging, and behaviors to be customized. Administrators can open/close a form, enable/disable drafts, allow previews, set submission limits, and disable the saving of results.\n\n\n\n  \n\n\n\n\n\n\n\nControlling access to submissions\n\n\nThe Form access control page allows administrator to determine who can create, update, delete, and purge form submissions.\n\n\n\n  \n\n\n\n\n\n\n\nEnabling form handlers\n\n\nThe Form handlers page lists additional handlers (aka behaviors) that can process form submissions. Handlers are plugins that act on a form submission. For example, sending email confirmations and notifications is done using the Email handler which is provided by the YAML Form module.\n\n\n\n  \n\n\n\n\n\n\n\nConfiguring third party settings\n\n\nThe Third party settings page allows contrib and custom modules to define form specific customization settings.\n\n\n\n  \n\n\n\n\n\n\n\nTranslating a form\n\n\nThe Translation page allows a form\ns configuration and elements to be translated into multiple languages.\n\n\n\n  \n\n\n\n\n\n\n\nManaging results\n\n\nThe Results page displays an overview of a form\ns submissions. Submissions can be reviewed, updated, flagged, annotated, and downloaded.\n\n\n\n  \n\n\n\n\n\n\n\nBuilding a custom report\n\n\nThe Table page provides a customizable table of a form\ns submissions. This page can be used to generate a customized report.\n\n\n\n  \n\n\n\n\n\n\n\nDownloading results\n\n\nThe Download page allows a form\ns submissions to be exported in to a customizable CSV (Comma Separated Values) file.\n\n\n\n  \n\n\n\n\n\n\n\nExporting configuration\n\n\nThe Export (form) page allows developers to quickly export a single form\ns configuration file. If you run into any issues with a form, you can also attach the below configuration (without any personal information) to a new ticket in the YAML Form\ns issue queue.\n\n\n\n  \n\n\n\n\n\n\n\nCreating form nodes\n\n\nA form node allows forms to be fully integrated into a website as nodes.\n\n\n\n  \n\n\n\n\n\n\n\nCreating a form block\n\n\nA form block allows a form to be placed anywhere on a website.", 
            "title": "Screencasts / Tutorials"
        }, 
        {
            "location": "/support/screencasts/#screencasts-tutorials", 
            "text": "", 
            "title": "Screencasts / Tutorials"
        }, 
        {
            "location": "/support/screencasts/#the-yaml-form-module", 
            "text": "The YAML Form module is a FAPI based form builder and submission manager for Drupal 8.", 
            "title": "The YAML Form module"
        }, 
        {
            "location": "/support/screencasts/#managing-forms", 
            "text": "The Forms page lists all available forms, which can be filtered by title, description, and/or elements.", 
            "title": "Managing forms"
        }, 
        {
            "location": "/support/screencasts/#using-templates", 
            "text": "The Templates page lists reusable templates that can be duplicated and customized to create new forms.", 
            "title": "Using templates"
        }, 
        {
            "location": "/support/screencasts/#managing-results", 
            "text": "The Results page lists all incoming submissions for all forms.", 
            "title": "Managing results"
        }, 
        {
            "location": "/support/screencasts/#defining-default-settings", 
            "text": "The Settings page allows administrators to manage global form and UI configuration settings, including updating default labels   descriptions, settings default format, and defining test dataset.", 
            "title": "Defining default settings"
        }, 
        {
            "location": "/support/screencasts/#defining-options", 
            "text": "The Options page lists predefined options which are used to build select menus, radio buttons, checkboxes and likerts.", 
            "title": "Defining options"
        }, 
        {
            "location": "/support/screencasts/#form-element-plugins", 
            "text": "The Elements page  lists all available form element plugins. Form element plugins are used to enhance existing render/form elements. Form element plugins provide default properties, data normalization, custom validation, element configuration form, and customizable display formats.", 
            "title": "Form element plugins"
        }, 
        {
            "location": "/support/screencasts/#form-handler-plugins", 
            "text": "The Handler page  lists all available form handler plugins. Handlers are used to route submitted data to external applications and send notifications   confirmations.", 
            "title": "Form handler plugins"
        }, 
        {
            "location": "/support/screencasts/#configuring-global-third-party-settings", 
            "text": "The Third party settings page allows contrib and custom modules to define global settings that are applied to all forms and submissions.", 
            "title": "Configuring global third party settings"
        }, 
        {
            "location": "/support/screencasts/#building-a-form", 
            "text": "The Form elements page allows users to add, update, duplicate, and delete form elements and wizard pages.", 
            "title": "Building a form"
        }, 
        {
            "location": "/support/screencasts/#editing-yaml-source", 
            "text": "The (View) Source page allows developers to edit a form s render array using YAML markup. Developers can use the (View) Source page to quickly alter a form s labels, cut-n-paste multiple elements, reorder elements, and add customize properties and markup to elements.", 
            "title": "Editing YAML source"
        }, 
        {
            "location": "/support/screencasts/#testing-a-form", 
            "text": "The Form test page allows a form to be tested using a customizable test dataset. Multiple test submissions can be created using the devel_generate module.", 
            "title": "Testing a form"
        }, 
        {
            "location": "/support/screencasts/#customizing-form-settings", 
            "text": "The Form settings page allows a form s labels, messaging, and behaviors to be customized. Administrators can open/close a form, enable/disable drafts, allow previews, set submission limits, and disable the saving of results.", 
            "title": "Customizing form settings"
        }, 
        {
            "location": "/support/screencasts/#controlling-access-to-submissions", 
            "text": "The Form access control page allows administrator to determine who can create, update, delete, and purge form submissions.", 
            "title": "Controlling access to submissions"
        }, 
        {
            "location": "/support/screencasts/#enabling-form-handlers", 
            "text": "The Form handlers page lists additional handlers (aka behaviors) that can process form submissions. Handlers are plugins that act on a form submission. For example, sending email confirmations and notifications is done using the Email handler which is provided by the YAML Form module.", 
            "title": "Enabling form handlers"
        }, 
        {
            "location": "/support/screencasts/#configuring-third-party-settings", 
            "text": "The Third party settings page allows contrib and custom modules to define form specific customization settings.", 
            "title": "Configuring third party settings"
        }, 
        {
            "location": "/support/screencasts/#translating-a-form", 
            "text": "The Translation page allows a form s configuration and elements to be translated into multiple languages.", 
            "title": "Translating a form"
        }, 
        {
            "location": "/support/screencasts/#managing-results_1", 
            "text": "The Results page displays an overview of a form s submissions. Submissions can be reviewed, updated, flagged, annotated, and downloaded.", 
            "title": "Managing results"
        }, 
        {
            "location": "/support/screencasts/#building-a-custom-report", 
            "text": "The Table page provides a customizable table of a form s submissions. This page can be used to generate a customized report.", 
            "title": "Building a custom report"
        }, 
        {
            "location": "/support/screencasts/#downloading-results", 
            "text": "The Download page allows a form s submissions to be exported in to a customizable CSV (Comma Separated Values) file.", 
            "title": "Downloading results"
        }, 
        {
            "location": "/support/screencasts/#exporting-configuration", 
            "text": "The Export (form) page allows developers to quickly export a single form s configuration file. If you run into any issues with a form, you can also attach the below configuration (without any personal information) to a new ticket in the YAML Form s issue queue.", 
            "title": "Exporting configuration"
        }, 
        {
            "location": "/support/screencasts/#creating-form-nodes", 
            "text": "A form node allows forms to be fully integrated into a website as nodes.", 
            "title": "Creating form nodes"
        }, 
        {
            "location": "/support/screencasts/#creating-a-form-block", 
            "text": "A form block allows a form to be placed anywhere on a website.", 
            "title": "Creating a form block"
        }, 
        {
            "location": "/support/glossary/", 
            "text": "Glossary\n\n\nBelow are definitions for some key terms and concepts that you need to know \nto for a better understanding of how the YAML Form module works.\n\n\nYAML: YAML Ain\nt Markup Language\n\nYAML is a human friendly data serialization standard for all programming \nlanguages.\n\n\nForm API (FAPI)\n\nDrupal\ns standard, secure, easy to use and easy to extend way of adding \nforms to your Drupal website.\n\n\nRender array\n\nRender arrays are the basic building blocks of Drupal content. In Drupal, \nrender arrays provide a structured way to programmatically alter content \nbefore it is displayed. \n\n\nPlugins\n\nPlugins are small pieces of functionality that are swappable.\n\n\nStates API\n\nAdds JavaScript to change the state of an element based on another element.", 
            "title": "Glossary"
        }, 
        {
            "location": "/support/glossary/#glossary", 
            "text": "Below are definitions for some key terms and concepts that you need to know \nto for a better understanding of how the YAML Form module works.  YAML: YAML Ain t Markup Language \nYAML is a human friendly data serialization standard for all programming \nlanguages.  Form API (FAPI) \nDrupal s standard, secure, easy to use and easy to extend way of adding \nforms to your Drupal website.  Render array \nRender arrays are the basic building blocks of Drupal content. In Drupal, \nrender arrays provide a structured way to programmatically alter content \nbefore it is displayed.   Plugins \nPlugins are small pieces of functionality that are swappable.  States API \nAdds JavaScript to change the state of an element based on another element.", 
            "title": "Glossary"
        }, 
        {
            "location": "/support/issues/", 
            "text": "Known Issues\n\n\nConfiguration Management\n\n\nIssue #1920902: Unable to tidy the bulk export of YamlForm and YamlFormOptions config files \nbecause Drupal\ns YAML utility is not a service.\n\n\n\n\nThe YAML Form module provides drush command to \ntidy\n exported YAML\n\nconfiguration files, so that they are easier to read and edit.\n\n\n\n\nForm Elements\n\n\nDrupal core forms system issues\n\n\n\n\nAny changes, improvements, and bug fixes for Drupal\ns Form API may directly\nimpact the YAML Form module.\n\n\n\n\n\n\nIssue #1593964: Allow FAPI usage of the datalist element\n\n\n\n\nIssue #2502195: Regression: Form throws LogicException when trying to render a form with object as an element\ns default value.\n  \n\n\n\n\nImpacts previewing entity autocomplete elements.\n\n\n\n\nIssue #2207383: Create a tooltip component\n\n\n\n\nImpacts displaying element description in a tooltip. jQUery UI\ns tooltip\ns UX\nis not great.\n\n\n\n\nDrupal\ns CKEditor link dialog replaces open dialog.\n\n\n\n\nMakes it impossible to display the CKEditor\ns in a dialog.\nWorkaround: Use CKEditor\ns link dialog.\n\n\n\n\nNot sure this issue should be addressed by core.\n\n\n#states API (Conditionals)\n\n\nDate/time (datetime)\n\n\nIssue #2419131: #states attribute does not work on #type datetime\n\n\nDetails (details)\n\n\nIssue #2348851: Regression: Allow HTML tags inside detail summary\n\n\nItem (item)\n\n\nIssue #783438: #states doesn\nt work for #type item\n\n\nHTML markup (markup)\n\n\nIssue #2700667: Notice: Undefined index: #type in drupal_process_states()\n\n\nManaged file (managed_file)\n\n\nIssue #2705471: Form states managed file fields\n\n\nPassword confirm (password_confirm)\n\n\nIssue #1427838: password and password_confirm children do not pick up #states or #attributes\n\n\nSelect (select)\n\n\nIssue #1426646: \n-Select-\n option is lost when form elements uses \n#states\n\n\nIssue #1149078: States API doesn\nt work with multiple select fields\n\n\nIssue #2791741: FAPI states: fields aren\nt hidden initally when depending on multi-value selection\n\n\nRadios (radios)\n\n\nIssue #2731991: Setting required on radios marks all options required\n\n\nIssue #994360: #states cannot disable/enable radios and checkboxes\n\n\nText format (text_format)\n\n\nIssue #997826: #states doesn\nt work correctly with type text_format\n\n\nIssue #2625128: Text format selection stays visible when using editor and a hidden form state\n\n\nSubmission Display\n\n\nIssue #2484693: Telephone Link field formatter breaks Drupal with 5 digits or less in the number\n\n\n\n\nWorkaround is to manually build a static HTML link.\nSee: \\Drupal\\yamlform\\Plugin\\YamlFormElement\\Telephone::formatHtml\n\n\n\n\nAccess Control\n\n\nIssue #2636066: Access control is not applied to config entity queries\n\n\n\n\nWorkaround: Manually check form access.\nSee: Drupal\\yamlform\\YamlFormEntityListBuilder\n\n\n\n\nUser Interface\n\n\nIssue #2235581: Make Token Dialog support inserting in WYSIWYGs (TinyMCE, CKEditor, etc.)\n\n\n\n\nThis blocks tokens from being inserted easily into the CodeMirror widget.\nWorkaround: Disable \n#click_insert\n functionality from the token dialog.\n\n\n\n\nConfig entity does NOT support \nEntity Validation API\n\n\n\n\nValidation constraints are only applicable to content entities and fields.\n\n\nIn D8 all config entity validation is handled via \n  \\Drupal\\Core\\Form\\FormInterface::validateForm\n\n\nWorkaround: Created the YamlFormEntityElementsValidator service.      \n\n\n\n\nIssue #2585169: Unable to alter local actions prior to rendering\n\n\n\n\nMakes it impossible to open an action in a dialog.\n\nWorkaround: Add local action to a controller\ns response.", 
            "title": "Known Issues"
        }, 
        {
            "location": "/support/issues/#known-issues", 
            "text": "", 
            "title": "Known Issues"
        }, 
        {
            "location": "/support/issues/#configuration-management", 
            "text": "Issue #1920902: Unable to tidy the bulk export of YamlForm and YamlFormOptions config files \nbecause Drupal s YAML utility is not a service.   The YAML Form module provides drush command to  tidy  exported YAML \nconfiguration files, so that they are easier to read and edit.", 
            "title": "Configuration Management"
        }, 
        {
            "location": "/support/issues/#form-elements", 
            "text": "Drupal core forms system issues   Any changes, improvements, and bug fixes for Drupal s Form API may directly\nimpact the YAML Form module.    Issue #1593964: Allow FAPI usage of the datalist element   Issue #2502195: Regression: Form throws LogicException when trying to render a form with object as an element s default value.      Impacts previewing entity autocomplete elements.   Issue #2207383: Create a tooltip component   Impacts displaying element description in a tooltip. jQUery UI s tooltip s UX\nis not great.   Drupal s CKEditor link dialog replaces open dialog.   Makes it impossible to display the CKEditor s in a dialog.\nWorkaround: Use CKEditor s link dialog.   Not sure this issue should be addressed by core.", 
            "title": "Form Elements"
        }, 
        {
            "location": "/support/issues/#35states-api-conditionals", 
            "text": "", 
            "title": "#states API (Conditionals)"
        }, 
        {
            "location": "/support/issues/#datetime-datetime", 
            "text": "Issue #2419131: #states attribute does not work on #type datetime", 
            "title": "Date/time (datetime)"
        }, 
        {
            "location": "/support/issues/#details-details", 
            "text": "Issue #2348851: Regression: Allow HTML tags inside detail summary", 
            "title": "Details (details)"
        }, 
        {
            "location": "/support/issues/#item-item", 
            "text": "Issue #783438: #states doesn t work for #type item", 
            "title": "Item (item)"
        }, 
        {
            "location": "/support/issues/#html-markup-markup", 
            "text": "Issue #2700667: Notice: Undefined index: #type in drupal_process_states()", 
            "title": "HTML markup (markup)"
        }, 
        {
            "location": "/support/issues/#managed-file-managed_file", 
            "text": "Issue #2705471: Form states managed file fields", 
            "title": "Managed file (managed_file)"
        }, 
        {
            "location": "/support/issues/#password-confirm-password_confirm", 
            "text": "Issue #1427838: password and password_confirm children do not pick up #states or #attributes", 
            "title": "Password confirm (password_confirm)"
        }, 
        {
            "location": "/support/issues/#select-select", 
            "text": "Issue #1426646:  -Select-  option is lost when form elements uses  #states  Issue #1149078: States API doesn t work with multiple select fields  Issue #2791741: FAPI states: fields aren t hidden initally when depending on multi-value selection", 
            "title": "Select (select)"
        }, 
        {
            "location": "/support/issues/#radios-radios", 
            "text": "Issue #2731991: Setting required on radios marks all options required  Issue #994360: #states cannot disable/enable radios and checkboxes", 
            "title": "Radios (radios)"
        }, 
        {
            "location": "/support/issues/#text-format-text_format", 
            "text": "Issue #997826: #states doesn t work correctly with type text_format  Issue #2625128: Text format selection stays visible when using editor and a hidden form state", 
            "title": "Text format (text_format)"
        }, 
        {
            "location": "/support/issues/#submission-display", 
            "text": "Issue #2484693: Telephone Link field formatter breaks Drupal with 5 digits or less in the number   Workaround is to manually build a static HTML link.\nSee: \\Drupal\\yamlform\\Plugin\\YamlFormElement\\Telephone::formatHtml", 
            "title": "Submission Display"
        }, 
        {
            "location": "/support/issues/#access-control", 
            "text": "Issue #2636066: Access control is not applied to config entity queries   Workaround: Manually check form access.\nSee: Drupal\\yamlform\\YamlFormEntityListBuilder", 
            "title": "Access Control"
        }, 
        {
            "location": "/support/issues/#user-interface", 
            "text": "Issue #2235581: Make Token Dialog support inserting in WYSIWYGs (TinyMCE, CKEditor, etc.)   This blocks tokens from being inserted easily into the CodeMirror widget.\nWorkaround: Disable  #click_insert  functionality from the token dialog.   Config entity does NOT support  Entity Validation API   Validation constraints are only applicable to content entities and fields.  In D8 all config entity validation is handled via \n  \\Drupal\\Core\\Form\\FormInterface::validateForm  Workaround: Created the YamlFormEntityElementsValidator service.         Issue #2585169: Unable to alter local actions prior to rendering   Makes it impossible to open an action in a dialog. \nWorkaround: Add local action to a controller s response.", 
            "title": "User Interface"
        }, 
        {
            "location": "/support/drupal/", 
            "text": "On Drupal.org\n\n\nAll development and ongoing support for the \nYAML Form module\n \nis taking place on Drupal.org.\n\n\nIssues for YAML Form\n\n\nThe YAML Form module\ns issue queue is very active and used to address bugs, \nquestion, issues, and feature requests. \n\n\nCreate New Issue\n\n\nPlease create new tickets when you find bugs or would like to request a feature.  \n\n\nContact Me - Jacob Rockowitz\n\n\nIf want to hire me please email me using my Drupal.org \ncontact form\n\nand please visit my website, \nthebigbluehouse.com", 
            "title": "On Drupal.org"
        }, 
        {
            "location": "/support/drupal/#on-drupalorg", 
            "text": "All development and ongoing support for the  YAML Form module  \nis taking place on Drupal.org.", 
            "title": "On Drupal.org"
        }, 
        {
            "location": "/support/drupal/#issues-for-yaml-form", 
            "text": "The YAML Form module s issue queue is very active and used to address bugs, \nquestion, issues, and feature requests.", 
            "title": "Issues for YAML Form"
        }, 
        {
            "location": "/support/drupal/#create-new-issue", 
            "text": "Please create new tickets when you find bugs or would like to request a feature.", 
            "title": "Create New Issue"
        }, 
        {
            "location": "/support/drupal/#contact-me-jacob-rockowitz", 
            "text": "If want to hire me please email me using my Drupal.org  contact form \nand please visit my website,  thebigbluehouse.com", 
            "title": "Contact Me - Jacob Rockowitz"
        }, 
        {
            "location": "/developers/extending/", 
            "text": "Extending\n\n\nThe YAML Form module provides \nplugins\n\nand hooks that allow contrib and custom modules to extend and enhance form \nelements and submission handling.\n\n\nYamlFormElement plugin\n\n\nThe YamlFormElement plugin is used to integrate and enhance form elements so \nthat they can be properly integrated into the YAML Form module. For example,\nto properly validate and handle file uploads using the \nManaged file\n element, \nthe YAML Form module provides a YamlFormElement plugin called \n\nManagedFile\n, \nwhich saves the uploaded files to a YAML Form specific file directory.\n\n\nYamlFormHandler plugin\n\n\nThe YamlFormHandler plugin allows developers to extend a form\ns submission \nhandling. Each YamlFormHandler plugin should live in a dedicated \nmodule and handler namespace. For example, if a developer wanted to setup \nMailChimp integration, they would create the \nYAML Form MailChimp\n module \n(yamlform_mailchimp.module), which would contain the YamlFormMailChimpHandler.\n\n\nThis approach/pattern allows popular YamlFormHandler plugins\n(that include tests) to be easily contributed back to the main YAML Form module.\n\n\nHooks\n\n\nSee \nAPI documentation\n.\n\n\nThird Party Settings\n\n\nThe YAML Form module also allows contrib modules to define third party settings\nfor all forms and/or for one specific form.  \n\n\nSee the \nyamlform_test_third_party_settings.module\n\nfor an example of how a contrib module can use third party settings to extend \nand enhance the YAML Form module.", 
            "title": "Customizing & Extending"
        }, 
        {
            "location": "/developers/extending/#extending", 
            "text": "The YAML Form module provides  plugins \nand hooks that allow contrib and custom modules to extend and enhance form \nelements and submission handling.", 
            "title": "Extending"
        }, 
        {
            "location": "/developers/extending/#yamlformelement-plugin", 
            "text": "The YamlFormElement plugin is used to integrate and enhance form elements so \nthat they can be properly integrated into the YAML Form module. For example,\nto properly validate and handle file uploads using the  Managed file  element, \nthe YAML Form module provides a YamlFormElement plugin called  ManagedFile , \nwhich saves the uploaded files to a YAML Form specific file directory.", 
            "title": "YamlFormElement plugin"
        }, 
        {
            "location": "/developers/extending/#yamlformhandler-plugin", 
            "text": "The YamlFormHandler plugin allows developers to extend a form s submission \nhandling. Each YamlFormHandler plugin should live in a dedicated \nmodule and handler namespace. For example, if a developer wanted to setup \nMailChimp integration, they would create the  YAML Form MailChimp  module \n(yamlform_mailchimp.module), which would contain the YamlFormMailChimpHandler.  This approach/pattern allows popular YamlFormHandler plugins\n(that include tests) to be easily contributed back to the main YAML Form module.", 
            "title": "YamlFormHandler plugin"
        }, 
        {
            "location": "/developers/extending/#hooks", 
            "text": "See  API documentation .", 
            "title": "Hooks"
        }, 
        {
            "location": "/developers/extending/#third-party-settings", 
            "text": "The YAML Form module also allows contrib modules to define third party settings\nfor all forms and/or for one specific form.    See the  yamlform_test_third_party_settings.module \nfor an example of how a contrib module can use third party settings to extend \nand enhance the YAML Form module.", 
            "title": "Third Party Settings"
        }, 
        {
            "location": "/developers/roadmap/", 
            "text": "Below is the current roadmap for the YAML Form module.\n\n\n\u2605 Indicates areas that I need help with. \n\n\nPhase I (before Release Candidate)\n\n\nDesign \n UX\n\n\nTemplating \u2605\n\n\n\n\n#2787117\n\n  Add more starter templates \u2605\n\n\nReview out-of-the-box templates provide by the yamlform_templates.module. \u2605 \n\n\n\n\nCode Review\n\n\n\n\nTestability\n\n\nRefactorability\n\n\nPlugin definitions \u2605\n\n\nEntity API implementation \u2605\n\n\nForm API implementation \u2605\n\n\n\n\nAPI Review\n\n\n\n\nReview doc blocks\n\n\n\n\nLibraries\n\n\n\n\nAdd external libraries to composer.json \u2605\n\n\n\n\nTesting\n\n\n\n\nRefactor PHPUnit tests\n\n\nImprove SimpleTest setUp performance.\n\n\nConfiguration Management\n\n\nDefault configuration\n\n\nFinalize default admin settings\n\n\n\n\nMultilingual\n\n\n\n\nFinalize how form\ns elements are translated. \u2605\n\n\nMake sure the YAML Form module is completely translatable. \u2605\n\n\n\n\nDocumentation \n Help\n\n\nGeneral\n\n\n\n\nDecide if documentation should live on Drupal.org\n\n\n#2759591\n\n  What is YAML and why we are using it? \nPOSTPONED\n\n\n\n\nModule\n\n\n\n\nReview hardcoded messages.\n\n\n\n\nEditorial \u2605\n\n\n\n\nUnified tone\n\n\nGeneral typos, grammar, and wording. \u2605\n\n\n\n\nPhase II (after Stable Release)\n\n\nForms\n\n\n\n\n#2757491\n \n  AJAX support for forms \u2605 \n\n\n\n\nRules/Actions\n\n\n\n\n#2779461\n \n  Rules/Action integration \u2605\n\n\n\n\nResults\n\n\n\n\nCreate trash bin for deleted results. \n\n\nCopy D8 core\ns solutions\n \n\n\n\n\nViews\n\n\n\n\n#2769977\n \n  Views integration \u2605\n\n\n\n\nAPIs\n \n\n\n\n\nREST API endpoint for CRUD operations.\n\n\nHeadless Drupal Forms\n\n\n\n\nOther\n \n\n\n\n\nCode snippets repository\n\n\nTemplate repository", 
            "title": "8.x-1.x Release Roadmap"
        }, 
        {
            "location": "/developers/roadmap/#phase-i-before-release-candidate", 
            "text": "", 
            "title": "Phase I (before Release Candidate)"
        }, 
        {
            "location": "/developers/roadmap/#design-ux", 
            "text": "Templating \u2605   #2787117 \n  Add more starter templates \u2605  Review out-of-the-box templates provide by the yamlform_templates.module. \u2605    Code Review   Testability  Refactorability  Plugin definitions \u2605  Entity API implementation \u2605  Form API implementation \u2605   API Review   Review doc blocks   Libraries   Add external libraries to composer.json \u2605   Testing   Refactor PHPUnit tests  Improve SimpleTest setUp performance.  Configuration Management  Default configuration  Finalize default admin settings", 
            "title": "Design &amp; UX"
        }, 
        {
            "location": "/developers/roadmap/#multilingual", 
            "text": "Finalize how form s elements are translated. \u2605  Make sure the YAML Form module is completely translatable. \u2605", 
            "title": "Multilingual"
        }, 
        {
            "location": "/developers/roadmap/#documentation-help", 
            "text": "General   Decide if documentation should live on Drupal.org  #2759591 \n  What is YAML and why we are using it?  POSTPONED   Module   Review hardcoded messages.   Editorial \u2605   Unified tone  General typos, grammar, and wording. \u2605", 
            "title": "Documentation &amp; Help"
        }, 
        {
            "location": "/developers/roadmap/#phase-ii-after-stable-release", 
            "text": "Forms   #2757491  \n  AJAX support for forms \u2605    Rules/Actions   #2779461  \n  Rules/Action integration \u2605   Results   Create trash bin for deleted results.   Copy D8 core s solutions     Views   #2769977  \n  Views integration \u2605   APIs     REST API endpoint for CRUD operations.  Headless Drupal Forms   Other     Code snippets repository  Template repository", 
            "title": "Phase II (after Stable Release)"
        }, 
        {
            "location": "/developers/development/", 
            "text": "Development Cheatsheet\n\n\nBelow are useful commands and cheatsheets that make it a little easier for\nme to maintain the YAML Form module.\n\n\nPatching\n\n\nCreate and manage patches\n\n\n# Create and checkout issue branch\ngit checkout -b [issue-number]-[issue-description]\n\n# Push issue branch to D.O. (optional)\ngit push -u origin [issue-number]-[issue-description]\n\n# Create patch by comparing (current) issue branch with 8.x-1.x branch \ngit diff 8.x-1.x \n [project_name]-[issue-description]-[issue-number]-[comment-number]-[drupal-version].patch\n\n\n\n\nIgnoring \n.patch, \n.diff, and .gitignore files\n\n\ncat \n .gitignore \n'EOF'\n.gitignore\n*.patch\n*.diff\nEOF\n\n\n\n\nApply patch\n\n\ncurl https://www.drupal.org/files/[patch-name].patch | git apply -\n\n\n\n\nRevert patch\n\n\ncurl https://www.drupal.org/files/[patch-name].patch | git apply -R -\n\n\n\n\nBranching\n\n\nMerge branch\n\n\n# Merge branch with all commits\ngit checkout 8.x-1.x\ngit merge [issue-number]-[issue-description]\ngit push\n\n# Merge branch as a single new commit\ngit checkout 8.x-1.x\ngit merge --squash [issue-number]-[issue-description]\ngit commit -m 'Issue #[issue-number]: [issue-description]'\ngit push\n\n\n\n\nExporting a branch\n\n\n# Create a zip archive for a branch\ngit archive --format zip --output yamlform-[issue-number]-[issue-description].zip [issue-number]-[issue-description]\n\n\n\n\nDelete issue branch\n\n\n# Delete local issue branch.\ngit branch -d [issue-number]-[issue-description] \n\n# Delete remote issue branch.\ngit push origin :[issue-number]-[issue-description]\n\n\n\n\nInterdiff\n\n\ninterdiff \\\n  [issue-number]-[old-comment-number].patch \\\n  [issue-number]-[new-comment-number].patch \\\n  \n interdiff-[issue-number]-[old-comment-number]-[new-comment-number].txt\n\n\n\n\nGitFlow\n\n\nBelow is a cheatsheet for using \nGitFlow\n \nfor development. \n\n\n# Create branch\ngit checkout 8.x-1.x\ngit checkout -b [issue-number]-[issue-description]\ngit push -u origin [issue-number]-[issue-description]\n\n# Create patch\ngit diff 8.x-1.x \n [project_name]-[issue-description]-[issue-number]-00.patch\n\n# Merge branch with all commits\ngit checkout 8.x-1.x\ngit merge [issue-number]-[issue-description]\ngit push\n\n# Merge branch as a single new commit\ngit checkout 8.x-1.x\ngit merge --squash [issue-number]-[issue-description]\ngit commit -m 'Issue #[issue-number]: [issue-description]'\ngit push\n\n# Delete branch\ngit branch -D [issue-number]-[issue-description]\ngit push origin :[issue-number]-[issue-description]\n\n\n\n\nDrush\n\n\nReinstall YAML Form module.\n\n\ndrush php-eval 'module_load_include('install', 'yamlform'); yamlform_uninstall();'; drush cron;\ndrush php-eval 'module_load_include('install', 'yamlform_node'); yamlform_node_uninstall();'; drush cron; \ndrush yamlform-purge --all -y; drush pmu -y yamlform_test; drush pmu -y yamlform_devel; drush pmu -y yamlform_examples; drush pmu -y yamlform_templates; drush pmu -y yamlform_ui; drush pmu -y yamlform_node; drush pmu -y yamlform; \ndrush en -y yamlform yamlform_ui yamlform_devel yamlform_examples yamlform_templates yamlform_node;\n\n# Optional.\ndrush en -y yamlform_test;\ndrush en -y yamlform_test_third_party_settings;\ndrush en -y yamlform_translation_test;\ndrush pmu -y yamlform_test_third_party_settings yamlform_translation_test;\n\n\n\n\nReinstall YAML Form Test module.\n\n\ndrush yamlform-purge --all -y; drush pmu -y yamlform_test; drush en -y yamlform_test;\n\n\n\n\nManage YAML Form module configuration using the \nFeatures\n module\n\n\n# Make sure all modules that are going to be exported are enabled\ndrush en -y yamlform yamlform_examples yamlform_templates yamlform_test yamlform_node;\n\n# Show the difference between the active config and the default config.\ndrush features-diff yamlform\ndrush features-diff yamlform_test\n\n# Export form configuration from your site.          \ndrush features-export -y yamlform\ndrush features-export -y yamlform_test\ndrush features-export -y yamlform_examples\ndrush features-export -y yamlform_templates\ndrush features-export -y yamlform_node\n\n# Tidy form configuration from your site.          \ndrush yamlform-tidy -y yamlform\ndrush yamlform-tidy -y yamlform_test\ndrush yamlform-tidy -y yamlform_examples\ndrush yamlform-tidy -y yamlform_templates\ndrush yamlform-tidy -y yamlform_node\n\n# Re-import all form configuration into your site.      \ndrush features-import -y yamlform\ndrush features-import -y yamlform_test\ndrush features-import -y yamlform_examples\ndrush features-import -y yamlform_templates\ndrush features-import -y yamlform_node\n\n\n\n\nInstall extra modules.\n\n\ndrush en -y yamlform captcha image_captcha honeypot validators;\n\n\n\n\nCreate test roles and users.\n\n\ndrush role-create developer\ndrush role-add-perm developer 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview,administer yamlform,administer blocks,administer nodes'\ndrush user-create developer --password=\ndeveloper\n\ndrush user-add-role developer developer\n\ndrush role-create admin\ndrush role-add-perm admin 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview,administer yamlform submission'\ndrush user-create admin --password=\nadmin\n\ndrush user-add-role admin admin\n\ndrush role-create manager\ndrush role-add-perm manager 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview'\ndrush user-create manager --password=\nmanager\n\ndrush user-add-role manager manager\n\ndrush role-create viewer\ndrush role-add-perm viewer 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview,view any yamlform submission'\ndrush user-create viewer --password=\nviewer\n\ndrush user-add-role viewer viewer\n\ndrush role-create user\ndrush user-create user --password=\nuser\n\ndrush user-add-role user user\n\ndrush role-create any\ndrush user-create any --password=\nany\n\ndrush role-add-perm any 'view the administration theme,access administration pages,access toolbar,access yamlform overview,create yamlform,edit any yamlform,delete any yamlform,view yamlform submissions any node,edit yamlform submissions any node,delete yamlform submissions any node'\ndrush user-add-role any any\n\ndrush role-create own\ndrush user-create own --password=\nown\n\ndrush role-add-perm own 'view the administration theme,access administration pages,access toolbar,access yamlform overview,create yamlform,edit own yamlform,delete own yamlform,view yamlform submissions own node,edit yamlform submissions own node,delete yamlform submissions own node'\ndrush user-add-role own own\n\n\n\n\nCreate test submissions for \nContact\n and \nExample: Elements\n form.\n\n\ndrush yamlform-generate contact\ndrush yamlform-generate example_elements\n\n\n\n\nTest update hooks\n\n\ndrush php-eval 'module_load_include('install', 'yamlform'); ($message = yamlform_update_8001()) ? drupal_set_message($message) : NULL;'\n\n\n\n\nAccess developer information\n\n\ndrush role-add-perm anonymous 'access devel information'\ndrush role-add-perm authenticated 'access devel information'\n\n\n\n\nReinstall\n\n\ndrush -y site-install\\\n  --account-mail=\nexample@example.com\n\\\n  --account-name=\nwebmaster\n\\\n  --account-pass=\ndrupal.admin\n\\\n  --site-mail=\nexample@example.com\n\\\n  --site-name=\nDrupal 8 (dev)\n;\n\n# Enable core modules\ndrush -y pm-enable\\\n  book\\\n  simpletest\\\n  telephone\\\n  language\\\n  locale\\\n  content_translation\\\n  config_translation;\n\n# Disable core modules\ndrush -y pm-uninstall\\\n  update;\n\n# Enable contrib modules\ndrush -y pm-enable\\\n  devel\\\n  devel_generate\\\n  kint\\\n  webprofiler\\\n  yamlform\\\n  yamlform_devel\\\n  yamlform_examples\\\n  yamlform_node\\\n  yamlform_templates\\\n  yamlform_test\\\n  yamlform_translation_test;", 
            "title": "Development Cheatsheet"
        }, 
        {
            "location": "/developers/development/#development-cheatsheet", 
            "text": "Below are useful commands and cheatsheets that make it a little easier for\nme to maintain the YAML Form module.", 
            "title": "Development Cheatsheet"
        }, 
        {
            "location": "/developers/development/#patching", 
            "text": "Create and manage patches  # Create and checkout issue branch\ngit checkout -b [issue-number]-[issue-description]\n\n# Push issue branch to D.O. (optional)\ngit push -u origin [issue-number]-[issue-description]\n\n# Create patch by comparing (current) issue branch with 8.x-1.x branch \ngit diff 8.x-1.x   [project_name]-[issue-description]-[issue-number]-[comment-number]-[drupal-version].patch  Ignoring  .patch,  .diff, and .gitignore files  cat   .gitignore  'EOF'\n.gitignore\n*.patch\n*.diff\nEOF  Apply patch  curl https://www.drupal.org/files/[patch-name].patch | git apply -  Revert patch  curl https://www.drupal.org/files/[patch-name].patch | git apply -R -", 
            "title": "Patching"
        }, 
        {
            "location": "/developers/development/#branching", 
            "text": "Merge branch  # Merge branch with all commits\ngit checkout 8.x-1.x\ngit merge [issue-number]-[issue-description]\ngit push\n\n# Merge branch as a single new commit\ngit checkout 8.x-1.x\ngit merge --squash [issue-number]-[issue-description]\ngit commit -m 'Issue #[issue-number]: [issue-description]'\ngit push  Exporting a branch  # Create a zip archive for a branch\ngit archive --format zip --output yamlform-[issue-number]-[issue-description].zip [issue-number]-[issue-description]  Delete issue branch  # Delete local issue branch.\ngit branch -d [issue-number]-[issue-description] \n\n# Delete remote issue branch.\ngit push origin :[issue-number]-[issue-description]", 
            "title": "Branching"
        }, 
        {
            "location": "/developers/development/#interdiff", 
            "text": "interdiff \\\n  [issue-number]-[old-comment-number].patch \\\n  [issue-number]-[new-comment-number].patch \\\n    interdiff-[issue-number]-[old-comment-number]-[new-comment-number].txt", 
            "title": "Interdiff"
        }, 
        {
            "location": "/developers/development/#gitflow", 
            "text": "Below is a cheatsheet for using  GitFlow  \nfor development.   # Create branch\ngit checkout 8.x-1.x\ngit checkout -b [issue-number]-[issue-description]\ngit push -u origin [issue-number]-[issue-description]\n\n# Create patch\ngit diff 8.x-1.x   [project_name]-[issue-description]-[issue-number]-00.patch\n\n# Merge branch with all commits\ngit checkout 8.x-1.x\ngit merge [issue-number]-[issue-description]\ngit push\n\n# Merge branch as a single new commit\ngit checkout 8.x-1.x\ngit merge --squash [issue-number]-[issue-description]\ngit commit -m 'Issue #[issue-number]: [issue-description]'\ngit push\n\n# Delete branch\ngit branch -D [issue-number]-[issue-description]\ngit push origin :[issue-number]-[issue-description]", 
            "title": "GitFlow"
        }, 
        {
            "location": "/developers/development/#drush", 
            "text": "Reinstall YAML Form module.  drush php-eval 'module_load_include('install', 'yamlform'); yamlform_uninstall();'; drush cron;\ndrush php-eval 'module_load_include('install', 'yamlform_node'); yamlform_node_uninstall();'; drush cron; \ndrush yamlform-purge --all -y; drush pmu -y yamlform_test; drush pmu -y yamlform_devel; drush pmu -y yamlform_examples; drush pmu -y yamlform_templates; drush pmu -y yamlform_ui; drush pmu -y yamlform_node; drush pmu -y yamlform; \ndrush en -y yamlform yamlform_ui yamlform_devel yamlform_examples yamlform_templates yamlform_node;\n\n# Optional.\ndrush en -y yamlform_test;\ndrush en -y yamlform_test_third_party_settings;\ndrush en -y yamlform_translation_test;\ndrush pmu -y yamlform_test_third_party_settings yamlform_translation_test;  Reinstall YAML Form Test module.  drush yamlform-purge --all -y; drush pmu -y yamlform_test; drush en -y yamlform_test;  Manage YAML Form module configuration using the  Features  module  # Make sure all modules that are going to be exported are enabled\ndrush en -y yamlform yamlform_examples yamlform_templates yamlform_test yamlform_node;\n\n# Show the difference between the active config and the default config.\ndrush features-diff yamlform\ndrush features-diff yamlform_test\n\n# Export form configuration from your site.          \ndrush features-export -y yamlform\ndrush features-export -y yamlform_test\ndrush features-export -y yamlform_examples\ndrush features-export -y yamlform_templates\ndrush features-export -y yamlform_node\n\n# Tidy form configuration from your site.          \ndrush yamlform-tidy -y yamlform\ndrush yamlform-tidy -y yamlform_test\ndrush yamlform-tidy -y yamlform_examples\ndrush yamlform-tidy -y yamlform_templates\ndrush yamlform-tidy -y yamlform_node\n\n# Re-import all form configuration into your site.      \ndrush features-import -y yamlform\ndrush features-import -y yamlform_test\ndrush features-import -y yamlform_examples\ndrush features-import -y yamlform_templates\ndrush features-import -y yamlform_node  Install extra modules.  drush en -y yamlform captcha image_captcha honeypot validators;  Create test roles and users.  drush role-create developer\ndrush role-add-perm developer 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview,administer yamlform,administer blocks,administer nodes'\ndrush user-create developer --password= developer \ndrush user-add-role developer developer\n\ndrush role-create admin\ndrush role-add-perm admin 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview,administer yamlform submission'\ndrush user-create admin --password= admin \ndrush user-add-role admin admin\n\ndrush role-create manager\ndrush role-add-perm manager 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview'\ndrush user-create manager --password= manager \ndrush user-add-role manager manager\n\ndrush role-create viewer\ndrush role-add-perm viewer 'view the administration theme,access toolbar,access administration pages,access content overview,access yamlform overview,view any yamlform submission'\ndrush user-create viewer --password= viewer \ndrush user-add-role viewer viewer\n\ndrush role-create user\ndrush user-create user --password= user \ndrush user-add-role user user\n\ndrush role-create any\ndrush user-create any --password= any \ndrush role-add-perm any 'view the administration theme,access administration pages,access toolbar,access yamlform overview,create yamlform,edit any yamlform,delete any yamlform,view yamlform submissions any node,edit yamlform submissions any node,delete yamlform submissions any node'\ndrush user-add-role any any\n\ndrush role-create own\ndrush user-create own --password= own \ndrush role-add-perm own 'view the administration theme,access administration pages,access toolbar,access yamlform overview,create yamlform,edit own yamlform,delete own yamlform,view yamlform submissions own node,edit yamlform submissions own node,delete yamlform submissions own node'\ndrush user-add-role own own  Create test submissions for  Contact  and  Example: Elements  form.  drush yamlform-generate contact\ndrush yamlform-generate example_elements  Test update hooks  drush php-eval 'module_load_include('install', 'yamlform'); ($message = yamlform_update_8001()) ? drupal_set_message($message) : NULL;'  Access developer information  drush role-add-perm anonymous 'access devel information'\ndrush role-add-perm authenticated 'access devel information'  Reinstall  drush -y site-install\\\n  --account-mail= example@example.com \\\n  --account-name= webmaster \\\n  --account-pass= drupal.admin \\\n  --site-mail= example@example.com \\\n  --site-name= Drupal 8 (dev) ;\n\n# Enable core modules\ndrush -y pm-enable\\\n  book\\\n  simpletest\\\n  telephone\\\n  language\\\n  locale\\\n  content_translation\\\n  config_translation;\n\n# Disable core modules\ndrush -y pm-uninstall\\\n  update;\n\n# Enable contrib modules\ndrush -y pm-enable\\\n  devel\\\n  devel_generate\\\n  kint\\\n  webprofiler\\\n  yamlform\\\n  yamlform_devel\\\n  yamlform_examples\\\n  yamlform_node\\\n  yamlform_templates\\\n  yamlform_test\\\n  yamlform_translation_test;", 
            "title": "Drush"
        }, 
        {
            "location": "/developers/maintainers/", 
            "text": "Maintainers Guide\n\n\nBelow are notes and references for current and future maintainers and contributors\nto the YAML Form module.\n\n\nReferences\n\n\n\n\nCreate a project (module or theme) on Drupal.org\n\n\n\n\nCoding Standards\n\n\nThe YAML Form module follows all \ncoding standards\n \nestablished by the Drupal community.\n\n\nBelow are the additional standards that should be followed.\n\n\n\n\n[Policy, no patch] PHP 5.4 short array syntax coding standards\n\n  The NOTES.md document includes a command to convert all arrays to use the\n  shorthand syntax.\n\n\n\n\nBecoming a co-maintainer\n\n\nEveryone is welcome to contribute to the YAML Form module by posting questions,\nissues, feature requests, and patches to the YAML Form module\ns \nissue queue\n.\n\n\nPleases read \nbest practices for co-maintaining projects\n\nfor information on how to become a co-maintainer of the YAML Form module.\n\n\nBelow are some specific tips and tasks for becoming a better contributor and \nco-maintainer of the YAML Form module:\n\n\n\n\n\n\nReview and edit the \ntest script\n which documents every \n  feature provided by the YAML Form module.  \n\n\n\n\n\n\nPost issues and patches to help improve and/or fix any issues with the\n  test script.\n\n\n\n\n\n\nReview, improve, and write self documenting SimpleTests and PHPUnit tests.\n\n\n\n\n\n\nWrite a contrib module that extends the YAML Form module.\n\n\n\n\n\n\nGiving commit credit\n\n\n\n\nIf others have contributed to the change you are committing, take the time to \ngive them credit. Each commit message should contain at least one contributor \nname, even if it refers to yourself. Once a project has more than one maintainer, \nor is taken over by a new maintainer, it\ns very valuable to know who actually \nwrote or contributed a certain change.\n\n\n \nCommit messages - providing history and credit\n\n\n\n\nPersonally, I will give someone commit credit for simply taking the time out of \ntheir day to write a clear and concise ticket about a bug or issue. \n\n\n\n\nI DO NOT give commit credit for people running automated code reviews and \nthen generating patches without ever installing, testing, or actually using \na module. It seems that certain organizations are just trying to \ngame\n the \ncommit credit system and I don\nt want to support this behavior.", 
            "title": "Maintainers Guide"
        }, 
        {
            "location": "/developers/maintainers/#maintainers-guide", 
            "text": "Below are notes and references for current and future maintainers and contributors\nto the YAML Form module.", 
            "title": "Maintainers Guide"
        }, 
        {
            "location": "/developers/maintainers/#references", 
            "text": "Create a project (module or theme) on Drupal.org", 
            "title": "References"
        }, 
        {
            "location": "/developers/maintainers/#coding-standards", 
            "text": "The YAML Form module follows all  coding standards  \nestablished by the Drupal community.  Below are the additional standards that should be followed.   [Policy, no patch] PHP 5.4 short array syntax coding standards \n  The NOTES.md document includes a command to convert all arrays to use the\n  shorthand syntax.", 
            "title": "Coding Standards"
        }, 
        {
            "location": "/developers/maintainers/#becoming-a-co-maintainer", 
            "text": "Everyone is welcome to contribute to the YAML Form module by posting questions,\nissues, feature requests, and patches to the YAML Form module s  issue queue .  Pleases read  best practices for co-maintaining projects \nfor information on how to become a co-maintainer of the YAML Form module.  Below are some specific tips and tasks for becoming a better contributor and \nco-maintainer of the YAML Form module:    Review and edit the  test script  which documents every \n  feature provided by the YAML Form module.      Post issues and patches to help improve and/or fix any issues with the\n  test script.    Review, improve, and write self documenting SimpleTests and PHPUnit tests.    Write a contrib module that extends the YAML Form module.", 
            "title": "Becoming a co-maintainer"
        }, 
        {
            "location": "/developers/maintainers/#giving-commit-credit", 
            "text": "If others have contributed to the change you are committing, take the time to \ngive them credit. Each commit message should contain at least one contributor \nname, even if it refers to yourself. Once a project has more than one maintainer, \nor is taken over by a new maintainer, it s very valuable to know who actually \nwrote or contributed a certain change.    Commit messages - providing history and credit   Personally, I will give someone commit credit for simply taking the time out of \ntheir day to write a clear and concise ticket about a bug or issue.    I DO NOT give commit credit for people running automated code reviews and \nthen generating patches without ever installing, testing, or actually using \na module. It seems that certain organizations are just trying to  game  the \ncommit credit system and I don t want to support this behavior.", 
            "title": "Giving commit credit"
        }, 
        {
            "location": "/developers/resources/", 
            "text": "Additional Resources\n\n\nArticles and Blogs Posts about YAML Forms\n\n\n\n\nYAML Forms for Drupal 8\n\n\n\n\nYAML\n\n\n\n\n\n\nThe Official YAML Web Site\n\n\n\n\n\n\nGet Started - YAML Ain\nt Markup Language\n\n\n\n\n\n\nYAML - Wikipedia\n\n\n\n\n\n\nRender Arrays\n\n\n\n\nRender arrays\n\n\n\n\nForm API\n\n\n\n\nForm API Reference\n\n\n\n\nForm #states API (Conditionals)\n\n\n\n\n\n\nForm API #states\n\n\n\n\n\n\ndrupal_process_states\n\n\n\n\n\n\nDrupal 7 Form API: Using #states with multiple conditionals (AND, OR and XOR)\n\n\n\n\n\n\nForm Builders\n\n\nBelow are the YAML Form module\ns \ncompetitors\n.\n\n\nDrupal Form Builders\n\n\n\n\nComparison of Form Building Modules\n\n\n\n\n\n\n\n\n\n\nWebform.com\n\n   Webform.com is a form and survey service built on the open-source software Drupal and Webform. \n\n\n\n\nDrupal 7 Form Building\n\n\n\n\n\n\n\n\nWordPress Form Builders\n\n\n\n\n\n\n8 Best WordPress Form Builder Plugins 2016 Reviewed (Free \n Paid)\n\n\n\n\n\n\n5 Best Contact Form Plugins for WordPress Compared\n\n\n\n\n\n\n\n\n\n\n\n\nGravity Forms\n - \nDemo\n \n\n  Gravity Forms is the Easiest Tool to Create Advanced Forms for Your WordPress Powered Website.\n\n\n\n\n\n\nNinja Forms\n - \nDemo\n\n  Create forms and manage submissions easily with a simple drag and drop interface. \n\n\n\n\n\n\nContact Form 7\n\n  Just another contact form plugin for WordPress. Simple but flexible.\n\n\n\n\n\n\nOther Form Builders\n\n\n\n\n\n\nThe Best Online Survey Tools of 2016\n\n\n\n\n\n\nAlternativeTo WebForm\n\n  Crowdsourced software recommendations\n\n\n\n\n\n\n\n\n\n\n\n\nForm.IO\n\n  Form.io A Form and Data Management Platform for Serverless Enterprise \n  Applications Simplify the connections between your forms and APIs. \n  Integrate with 3rd party providers and legacy systems. \n  All while maintaining control of your data.\n\n\n\n\n\n\nCognito Forms\n\n  A free online form builder that helps you create HTML forms for your website. \n  Create contact forms, registration forms, order forms, surveys, and more.\n\n\n\n\n\n\nFormSite\n\n  Easily build professional online html forms and web surveys. \n\n\n\n\n\n\nJotForm\n \n\n  JotForm\ns form builder helps you create \n publish online forms anywhere, \n  anytime without writing a single line of code.\n\n\n\n\n\n\nWufoo\n\n  Our form designer can help you create contact forms, online surveys and \n  invitations so you can collect the data, registrations and payments you need. \n\n\n\n\n\n\nSurvey monkey\n   \n\n  Create and publish online surveys in minutes, and view results graphically and in real time.\n\n\n\n\n\n\nGoogle Forms\n  \n\n  Create a new survey on your own or with others at the same time. Choose from \n  a variety of beautiful, pre-made themes or create your own. Analyze your \n  results in Google Forms. Free from Google.", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/developers/resources/#additional-resources", 
            "text": "", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/developers/resources/#articles-and-blogs-posts-about-yaml-forms", 
            "text": "YAML Forms for Drupal 8", 
            "title": "Articles and Blogs Posts about YAML Forms"
        }, 
        {
            "location": "/developers/resources/#yaml", 
            "text": "The Official YAML Web Site    Get Started - YAML Ain t Markup Language    YAML - Wikipedia", 
            "title": "YAML"
        }, 
        {
            "location": "/developers/resources/#render-arrays", 
            "text": "Render arrays", 
            "title": "Render Arrays"
        }, 
        {
            "location": "/developers/resources/#form-api", 
            "text": "Form API Reference", 
            "title": "Form API"
        }, 
        {
            "location": "/developers/resources/#form-35states-api-conditionals", 
            "text": "Form API #states    drupal_process_states    Drupal 7 Form API: Using #states with multiple conditionals (AND, OR and XOR)", 
            "title": "Form #states API (Conditionals)"
        }, 
        {
            "location": "/developers/resources/#form-builders", 
            "text": "Below are the YAML Form module s  competitors .  Drupal Form Builders   Comparison of Form Building Modules      Webform.com \n   Webform.com is a form and survey service built on the open-source software Drupal and Webform.    Drupal 7 Form Building     WordPress Form Builders    8 Best WordPress Form Builder Plugins 2016 Reviewed (Free   Paid)    5 Best Contact Form Plugins for WordPress Compared       Gravity Forms  -  Demo   \n  Gravity Forms is the Easiest Tool to Create Advanced Forms for Your WordPress Powered Website.    Ninja Forms  -  Demo \n  Create forms and manage submissions easily with a simple drag and drop interface.     Contact Form 7 \n  Just another contact form plugin for WordPress. Simple but flexible.    Other Form Builders    The Best Online Survey Tools of 2016    AlternativeTo WebForm \n  Crowdsourced software recommendations       Form.IO \n  Form.io A Form and Data Management Platform for Serverless Enterprise \n  Applications Simplify the connections between your forms and APIs. \n  Integrate with 3rd party providers and legacy systems. \n  All while maintaining control of your data.    Cognito Forms \n  A free online form builder that helps you create HTML forms for your website. \n  Create contact forms, registration forms, order forms, surveys, and more.    FormSite \n  Easily build professional online html forms and web surveys.     JotForm   \n  JotForm s form builder helps you create   publish online forms anywhere, \n  anytime without writing a single line of code.    Wufoo \n  Our form designer can help you create contact forms, online surveys and \n  invitations so you can collect the data, registrations and payments you need.     Survey monkey     \n  Create and publish online surveys in minutes, and view results graphically and in real time.    Google Forms    \n  Create a new survey on your own or with others at the same time. Choose from \n  a variety of beautiful, pre-made themes or create your own. Analyze your \n  results in Google Forms. Free from Google.", 
            "title": "Form Builders"
        }
    ]
}